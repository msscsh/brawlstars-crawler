<!DOCTYPE html>
<html>
   <head>
      <meta charset="UTF-8">
      <title>Team lineup</title>
      <!-- Vincula o arquivo style.css -->
      <link rel="stylesheet" href="style.css">
      <!-- Resto do código do cabeçalho -->
   </head>
   <body>
      <div>
         <h2>Players list</h2>
         <div id="player-list" class="player-list" ondrop="drop(event, -1)" ondragover="allowDrop(event)" ondragleave="removeHighlight(event)">
            <% clubPlayers.forEach((clubPlayer) => { %>
            <span class="player-box" draggable="true" ondragstart="drag(event, '<%= clubPlayer.tag %>')"><%= clubPlayer.name %></span>
            <% }); %>
         </div>
      </div>
      <div>
         <h2>Teams</h2>
         <div class="teams-grid">
            <% teams.forEach((team, teamIndex) => { %>
            <div class="team-container">
               <h2 contenteditable="true" oninput="updateTeamName(event, <%= teamIndex %> )"><%= team.name %></h2>
               <div class="team-area" ondrop="drop(event, <%= teamIndex %>)" ondragover="allowDrop(event)" ondragleave="removeHighlight(event)">
                  <% team.players.forEach((clubPlayer) => { %>
                  <span class="player-box" draggable="true" ondragstart="drag(event, '<%= clubPlayer.tag %>')"><%= clubPlayer.name %></span>
                  <% }); %>
               </div>
            </div>
            <% }); %>
         </div>
      </div>
      <button onclick="saveTeams()">Save teams</button>
      <button onclick="clearTeams()">Clear teams</button>
      <script>
         const playersData = <%- JSON.stringify(clubPlayers) %>;
         const teamData = <%- JSON.stringify(teams) %>;
         let availablePlayers = <%- JSON.stringify(availablePlayers) %>;
         
         function getPlayerByTag(tag) {
           return playersData.find((player) => player.tag === tag) || null;
         }
         
         function allowDrop(event) {
           event.preventDefault();
           event.currentTarget.classList.add("highlight");
         }
         
         function removeHighlight(event) {
           event.currentTarget.classList.remove("highlight");
         }
         
         function drag(event, tag) {
           event.dataTransfer.setData("text", tag);
         }
         
         function drop(event, teamIndex) {
            event.preventDefault();
            const tag = event.dataTransfer.getData("text");
            const target = event.currentTarget;

            if (target && target.classList.contains("highlight")) {
              target.classList.remove("highlight");
            }

            const player = getPlayerByTag(tag);
            const team = teamData[teamIndex];

            if (player) {
              if (teamIndex === -1) {
                const playerIndex = teamData.findIndex((team) => team.players.includes(player.tag));
                if (playerIndex !== -1) {
                  teamData[playerIndex].players = teamData[playerIndex].players.filter((playerTag) => playerTag !== player.tag);
                  availablePlayers.push(player);
                }
              } else if (teamIndex >= 0 && teamIndex < teamData.length) {
                if (team.players.length >= 3) {
                  if (target) {
                    target.classList.add("highlight-error");
                    setTimeout(() => {
                      if (target && target.classList.contains("highlight-error")) {
                        target.classList.remove("highlight-error");
                      }
                    }, 1000);
                  }
                } else {
                  const playerIndex = availablePlayers.findIndex((jogadorDisp) => jogadorDisp.tag === player.tag);
                  if (playerIndex !== -1) {
                    availablePlayers.splice(playerIndex, 1);
                    teamData[teamIndex].players.push(player.tag);
                  }
                  else {
                    teamData.forEach((team) => {
                      const playerIndex = team.players.indexOf(tag);
                      if (playerIndex !== -1) {
                        team.players.splice(playerIndex, 1);
                      }
                    });
                    teamData[teamIndex].players.push(player.tag);
                  }
                }
              }
            }

            updateView();
          }
         
         function updateTeamName(event, teamIndex) {
          teamData[teamIndex].name = event.target.textContent;
         }
         
         function updateView() {
           document.getElementById("player-list").innerHTML = availablePlayers.map((player) => {
             return `<span class="player-box" draggable="true" ondragstart="drag(event, '${player.tag}')">${player.name}</span>`;
           }).join("");
         
           document.querySelectorAll(".team-container").forEach((teamContainer, teamIndex) => {
             const team = teamData[teamIndex];
             teamContainer.querySelector("h2").textContent = team.name;
         
             const teamArea = teamContainer.querySelector(".team-area");
             teamArea.innerHTML = team.players.map((playersTag) => {
               const player = getPlayerByTag(playersTag);
               return `<span class="player-box" draggable="true" ondragstart="drag(event, '${player.tag}')">${player.name}</span>`;
             }).join("");
           });
         }
         
         function saveTeams() {
           const requestOptions = {
             method: 'POST',
             headers: { 'Content-Type': 'application/json' },
             body: JSON.stringify({ teams: teamData })
           };
         
           fetch('/teams', requestOptions)
             .then(response => response.json())
             .catch(error => console.error('Error sending the data:', error));
         }
         
         function clearTeams() {
           availablePlayers = playersData.map((player) => player);
           teamData.forEach((team) => (team.players = []));
           updateView();
         }
         
         updateView();
      </script>
   </body>
</html>